<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Unified\Unified_to;

class Pipeline 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Remove a pipeline
     * 
     * @param \Unified\Unified_to\Models\Operations\DeleteCrmConnectionIdPipelineIdRequest $request
     * @return \Unified\Unified_to\Models\Operations\DeleteCrmConnectionIdPipelineIdResponse
     */
	public function deleteCrmConnectionIdPipelineId(
        ?\Unified\Unified_to\Models\Operations\DeleteCrmConnectionIdPipelineIdRequest $request,
    ): \Unified\Unified_to\Models\Operations\DeleteCrmConnectionIdPipelineIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/pipeline/{id}', \Unified\Unified_to\Models\Operations\DeleteCrmConnectionIdPipelineIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\DeleteCrmConnectionIdPipelineIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteCrmConnectionIdPipelineIdDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all pipelines
     * 
     * @param \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineRequest $request
     * @return \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineResponse
     */
	public function getCrmConnectionIdPipeline(
        ?\Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineRequest $request,
    ): \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/pipeline', \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmPipelines = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\CrmPipeline>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a pipeline
     * 
     * @param \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineIdRequest $request
     * @return \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineIdResponse
     */
	public function getCrmConnectionIdPipelineId(
        ?\Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineIdRequest $request,
    ): \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/pipeline/{id}', \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetCrmConnectionIdPipelineIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmPipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmPipeline', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a pipeline
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchCrmConnectionIdPipelineIdRequest $request
     * @return \Unified\Unified_to\Models\Operations\PatchCrmConnectionIdPipelineIdResponse
     */
	public function patchCrmConnectionIdPipelineId(
        ?\Unified\Unified_to\Models\Operations\PatchCrmConnectionIdPipelineIdRequest $request,
    ): \Unified\Unified_to\Models\Operations\PatchCrmConnectionIdPipelineIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/pipeline/{id}', \Unified\Unified_to\Models\Operations\PatchCrmConnectionIdPipelineIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "crmPipeline", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PatchCrmConnectionIdPipelineIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmPipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmPipeline', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a pipeline
     * 
     * @param \Unified\Unified_to\Models\Operations\PostCrmConnectionIdPipelineRequest $request
     * @return \Unified\Unified_to\Models\Operations\PostCrmConnectionIdPipelineResponse
     */
	public function postCrmConnectionIdPipeline(
        ?\Unified\Unified_to\Models\Operations\PostCrmConnectionIdPipelineRequest $request,
    ): \Unified\Unified_to\Models\Operations\PostCrmConnectionIdPipelineResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/pipeline', \Unified\Unified_to\Models\Operations\PostCrmConnectionIdPipelineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "crmPipeline", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PostCrmConnectionIdPipelineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmPipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmPipeline', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a pipeline
     * 
     * @param \Unified\Unified_to\Models\Operations\PutCrmConnectionIdPipelineIdRequest $request
     * @return \Unified\Unified_to\Models\Operations\PutCrmConnectionIdPipelineIdResponse
     */
	public function putCrmConnectionIdPipelineId(
        ?\Unified\Unified_to\Models\Operations\PutCrmConnectionIdPipelineIdRequest $request,
    ): \Unified\Unified_to\Models\Operations\PutCrmConnectionIdPipelineIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/pipeline/{id}', \Unified\Unified_to\Models\Operations\PutCrmConnectionIdPipelineIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "crmPipeline", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PutCrmConnectionIdPipelineIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmPipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmPipeline', 'json');
            }
        }

        return $response;
    }
}