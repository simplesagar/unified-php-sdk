<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Unified\Unified_to;

class File 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create a file
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateCrmFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\CreateCrmFileResponse
     */
	public function createCrmFile(
        ?\Unified\Unified_to\Models\Operations\CreateCrmFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\CreateCrmFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/file', \Unified\Unified_to\Models\Operations\CreateCrmFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "crmFile", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateCrmFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a file
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateStorageFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\CreateStorageFileResponse
     */
	public function createStorageFile(
        ?\Unified\Unified_to\Models\Operations\CreateStorageFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\CreateStorageFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/storage/{connection_id}/file', \Unified\Unified_to\Models\Operations\CreateStorageFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "storageFile", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateStorageFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storageFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\StorageFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a file
     * 
     * @param \Unified\Unified_to\Models\Operations\GetCrmFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\GetCrmFileResponse
     */
	public function getCrmFile(
        ?\Unified\Unified_to\Models\Operations\GetCrmFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\GetCrmFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\GetCrmFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetCrmFileRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetCrmFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a file
     * 
     * @param \Unified\Unified_to\Models\Operations\GetStorageFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\GetStorageFileResponse
     */
	public function getStorageFile(
        ?\Unified\Unified_to\Models\Operations\GetStorageFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\GetStorageFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/storage/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\GetStorageFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetStorageFileRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetStorageFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storageFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\StorageFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all files
     * 
     * @param \Unified\Unified_to\Models\Operations\ListCrmFilesRequest $request
     * @return \Unified\Unified_to\Models\Operations\ListCrmFilesResponse
     */
	public function listCrmFiles(
        ?\Unified\Unified_to\Models\Operations\ListCrmFilesRequest $request,
    ): \Unified\Unified_to\Models\Operations\ListCrmFilesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/file', \Unified\Unified_to\Models\Operations\ListCrmFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListCrmFilesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListCrmFilesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\CrmFile>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all files
     * 
     * @param \Unified\Unified_to\Models\Operations\ListStorageFilesRequest $request
     * @return \Unified\Unified_to\Models\Operations\ListStorageFilesResponse
     */
	public function listStorageFiles(
        ?\Unified\Unified_to\Models\Operations\ListStorageFilesRequest $request,
    ): \Unified\Unified_to\Models\Operations\ListStorageFilesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/storage/{connection_id}/file', \Unified\Unified_to\Models\Operations\ListStorageFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListStorageFilesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListStorageFilesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storageFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\StorageFile>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a file
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchCrmFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\PatchCrmFileResponse
     */
	public function patchCrmFile(
        ?\Unified\Unified_to\Models\Operations\PatchCrmFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\PatchCrmFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\PatchCrmFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "crmFile", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchCrmFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a file
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchStorageFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\PatchStorageFileResponse
     */
	public function patchStorageFile(
        ?\Unified\Unified_to\Models\Operations\PatchStorageFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\PatchStorageFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/storage/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\PatchStorageFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "storageFile", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchStorageFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storageFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\StorageFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a file
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveCrmFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\RemoveCrmFileResponse
     */
	public function removeCrmFile(
        ?\Unified\Unified_to\Models\Operations\RemoveCrmFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\RemoveCrmFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\RemoveCrmFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveCrmFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a file
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveStorageFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\RemoveStorageFileResponse
     */
	public function removeStorageFile(
        ?\Unified\Unified_to\Models\Operations\RemoveStorageFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\RemoveStorageFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/storage/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\RemoveStorageFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveStorageFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a file
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateCrmFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\UpdateCrmFileResponse
     */
	public function updateCrmFile(
        ?\Unified\Unified_to\Models\Operations\UpdateCrmFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\UpdateCrmFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\UpdateCrmFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "crmFile", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateCrmFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crmFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\CrmFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a file
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateStorageFileRequest $request
     * @return \Unified\Unified_to\Models\Operations\UpdateStorageFileResponse
     */
	public function updateStorageFile(
        ?\Unified\Unified_to\Models\Operations\UpdateStorageFileRequest $request,
    ): \Unified\Unified_to\Models\Operations\UpdateStorageFileResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/storage/{connection_id}/file/{id}', \Unified\Unified_to\Models\Operations\UpdateStorageFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "storageFile", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateStorageFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storageFile = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\StorageFile', 'json');
            }
        }

        return $response;
    }
}