<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Unified\Unified_to;

class Note 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Remove a note
     * 
     * @param \Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdResponse
     */
	public function deleteTicketingConnectionIdNotesTicketIdId(
        ?\Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdRequest $request,
        \Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ticketing/{connection_id}/notes/{ticket_id}/{id}', \Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\DeleteTicketingConnectionIdNotesTicketIdIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteTicketingConnectionIdNotesTicketIdIdDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all notes
     * 
     * @param \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdResponse
     */
	public function getTicketingConnectionIdNotesTicketId(
        ?\Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdRequest $request,
        \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ticketing/{connection_id}/notes/{ticket_id}', \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ticketingNotes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\TicketingNote>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a note
     * 
     * @param \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdResponse
     */
	public function getTicketingConnectionIdNotesTicketIdId(
        ?\Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdRequest $request,
        \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ticketing/{connection_id}/notes/{ticket_id}/{id}', \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetTicketingConnectionIdNotesTicketIdIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ticketingNote = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\TicketingNote', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a note
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdResponse
     */
	public function patchTicketingConnectionIdNotesTicketIdId(
        ?\Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdRequest $request,
        \Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ticketing/{connection_id}/notes/{ticket_id}/{id}', \Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ticketingNote", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PatchTicketingConnectionIdNotesTicketIdIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ticketingNote = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\TicketingNote', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a note
     * 
     * @param \Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdResponse
     */
	public function postTicketingConnectionIdNotesTicketId(
        ?\Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdRequest $request,
        \Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ticketing/{connection_id}/notes/{ticket_id}', \Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ticketingNote", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PostTicketingConnectionIdNotesTicketIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ticketingNote = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\TicketingNote', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a note
     * 
     * @param \Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdResponse
     */
	public function putTicketingConnectionIdNotesTicketIdId(
        ?\Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdRequest $request,
        \Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ticketing/{connection_id}/notes/{ticket_id}/{id}', \Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ticketingNote", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PutTicketingConnectionIdNotesTicketIdIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ticketingNote = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\TicketingNote', 'json');
            }
        }

        return $response;
    }
}