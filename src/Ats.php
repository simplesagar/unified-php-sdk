<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Unified\Unified_to;

class Ats 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Remove an application
     * 
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdResponse
     */
	public function deleteAtsConnectionIdApplicationId(
        ?\Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdRequest $request,
        \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdApplicationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteAtsConnectionIdApplicationIdDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdResponse
     */
	public function deleteAtsConnectionIdCandidateId(
        ?\Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdRequest $request,
        \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdCandidateIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteAtsConnectionIdCandidateIdDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdResponse
     */
	public function deleteAtsConnectionIdInterviewId(
        ?\Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdRequest $request,
        \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdInterviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteAtsConnectionIdInterviewIdDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a job
     * 
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdResponse
     */
	public function deleteAtsConnectionIdJobId(
        ?\Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdRequest $request,
        \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdJobIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteAtsConnectionIdJobIdDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdResponse
     */
	public function deleteAtsConnectionIdScorecardId(
        ?\Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdRequest $request,
        \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\DeleteAtsConnectionIdScorecardIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteAtsConnectionIdScorecardIdDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all applications
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationResponse
     */
	public function getAtsConnectionIdApplication(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsApplication>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an application
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdResponse
     */
	public function getAtsConnectionIdApplicationId(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdApplicationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all candidates
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateResponse
     */
	public function getAtsConnectionIdCandidate(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsCandidate>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdResponse
     */
	public function getAtsConnectionIdCandidateId(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdCandidateIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all interviews
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewResponse
     */
	public function getAtsConnectionIdInterview(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterviews = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsInterview>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdResponse
     */
	public function getAtsConnectionIdInterviewId(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdInterviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all jobs
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobResponse
     */
	public function getAtsConnectionIdJob(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJobs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsJob>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a job
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdResponse
     */
	public function getAtsConnectionIdJobId(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdJobIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all scorecards
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardResponse
     */
	public function getAtsConnectionIdScorecard(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsScorecard>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdResponse
     */
	public function getAtsConnectionIdScorecardId(
        ?\Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\GetAtsConnectionIdScorecardIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an application
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdResponse
     */
	public function patchAtsConnectionIdApplicationId(
        ?\Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsApplication", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdApplicationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdResponse
     */
	public function patchAtsConnectionIdCandidateId(
        ?\Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsCandidate", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdCandidateIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdResponse
     */
	public function patchAtsConnectionIdInterviewId(
        ?\Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsInterview", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdInterviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a job
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdResponse
     */
	public function patchAtsConnectionIdJobId(
        ?\Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsJob", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdJobIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdResponse
     */
	public function patchAtsConnectionIdScorecardId(
        ?\Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsScorecard", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsConnectionIdScorecardIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an application
     * 
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationRequest $request
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationResponse
     */
	public function postAtsConnectionIdApplication(
        ?\Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationRequest $request,
        \Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application', \Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsApplication", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PostAtsConnectionIdApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateRequest $request
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateResponse
     */
	public function postAtsConnectionIdCandidate(
        ?\Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateRequest $request,
        \Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate', \Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsCandidate", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PostAtsConnectionIdCandidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewRequest $request
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewResponse
     */
	public function postAtsConnectionIdInterview(
        ?\Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewRequest $request,
        \Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview', \Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsInterview", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PostAtsConnectionIdInterviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a job
     * 
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobRequest $request
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobResponse
     */
	public function postAtsConnectionIdJob(
        ?\Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobRequest $request,
        \Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job', \Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsJob", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PostAtsConnectionIdJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardRequest $request
     * @param \Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardResponse
     */
	public function postAtsConnectionIdScorecard(
        ?\Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardRequest $request,
        \Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard', \Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsScorecard", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PostAtsConnectionIdScorecardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an application
     * 
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdResponse
     */
	public function putAtsConnectionIdApplicationId(
        ?\Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdRequest $request,
        \Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsApplication", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PutAtsConnectionIdApplicationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdResponse
     */
	public function putAtsConnectionIdCandidateId(
        ?\Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdRequest $request,
        \Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsCandidate", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PutAtsConnectionIdCandidateIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdResponse
     */
	public function putAtsConnectionIdInterviewId(
        ?\Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdRequest $request,
        \Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsInterview", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PutAtsConnectionIdInterviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a job
     * 
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdResponse
     */
	public function putAtsConnectionIdJobId(
        ?\Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdRequest $request,
        \Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsJob", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PutAtsConnectionIdJobIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdRequest $request
     * @param \Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdResponse
     */
	public function putAtsConnectionIdScorecardId(
        ?\Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdRequest $request,
        \Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsScorecard", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Unified\Unified_to\Models\Operations\PutAtsConnectionIdScorecardIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
}