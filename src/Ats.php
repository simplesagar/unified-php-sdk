<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Unified\Unified_to;

class Ats 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create an activity
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateAtsActivityRequest $request
     * @param \Unified\Unified_to\Models\Operations\CreateAtsActivitySecurity $security
     * @return \Unified\Unified_to\Models\Operations\CreateAtsActivityResponse
     */
	public function createAtsActivity(
        ?\Unified\Unified_to\Models\Operations\CreateAtsActivityRequest $request,
        \Unified\Unified_to\Models\Operations\CreateAtsActivitySecurity $security,
    ): \Unified\Unified_to\Models\Operations\CreateAtsActivityResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/activity', \Unified\Unified_to\Models\Operations\CreateAtsActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsActivity", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateAtsActivityResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an application
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateAtsApplicationRequest $request
     * @param \Unified\Unified_to\Models\Operations\CreateAtsApplicationSecurity $security
     * @return \Unified\Unified_to\Models\Operations\CreateAtsApplicationResponse
     */
	public function createAtsApplication(
        ?\Unified\Unified_to\Models\Operations\CreateAtsApplicationRequest $request,
        \Unified\Unified_to\Models\Operations\CreateAtsApplicationSecurity $security,
    ): \Unified\Unified_to\Models\Operations\CreateAtsApplicationResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application', \Unified\Unified_to\Models\Operations\CreateAtsApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsApplication", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateAtsApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateAtsCandidateRequest $request
     * @param \Unified\Unified_to\Models\Operations\CreateAtsCandidateSecurity $security
     * @return \Unified\Unified_to\Models\Operations\CreateAtsCandidateResponse
     */
	public function createAtsCandidate(
        ?\Unified\Unified_to\Models\Operations\CreateAtsCandidateRequest $request,
        \Unified\Unified_to\Models\Operations\CreateAtsCandidateSecurity $security,
    ): \Unified\Unified_to\Models\Operations\CreateAtsCandidateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate', \Unified\Unified_to\Models\Operations\CreateAtsCandidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsCandidate", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateAtsCandidateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a document
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateAtsDocumentRequest $request
     * @param \Unified\Unified_to\Models\Operations\CreateAtsDocumentSecurity $security
     * @return \Unified\Unified_to\Models\Operations\CreateAtsDocumentResponse
     */
	public function createAtsDocument(
        ?\Unified\Unified_to\Models\Operations\CreateAtsDocumentRequest $request,
        \Unified\Unified_to\Models\Operations\CreateAtsDocumentSecurity $security,
    ): \Unified\Unified_to\Models\Operations\CreateAtsDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/document', \Unified\Unified_to\Models\Operations\CreateAtsDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsDocument", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateAtsDocumentResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateAtsInterviewRequest $request
     * @param \Unified\Unified_to\Models\Operations\CreateAtsInterviewSecurity $security
     * @return \Unified\Unified_to\Models\Operations\CreateAtsInterviewResponse
     */
	public function createAtsInterview(
        ?\Unified\Unified_to\Models\Operations\CreateAtsInterviewRequest $request,
        \Unified\Unified_to\Models\Operations\CreateAtsInterviewSecurity $security,
    ): \Unified\Unified_to\Models\Operations\CreateAtsInterviewResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview', \Unified\Unified_to\Models\Operations\CreateAtsInterviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsInterview", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateAtsInterviewResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a job
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateAtsJobRequest $request
     * @param \Unified\Unified_to\Models\Operations\CreateAtsJobSecurity $security
     * @return \Unified\Unified_to\Models\Operations\CreateAtsJobResponse
     */
	public function createAtsJob(
        ?\Unified\Unified_to\Models\Operations\CreateAtsJobRequest $request,
        \Unified\Unified_to\Models\Operations\CreateAtsJobSecurity $security,
    ): \Unified\Unified_to\Models\Operations\CreateAtsJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job', \Unified\Unified_to\Models\Operations\CreateAtsJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsJob", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateAtsJobResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\CreateAtsScorecardRequest $request
     * @param \Unified\Unified_to\Models\Operations\CreateAtsScorecardSecurity $security
     * @return \Unified\Unified_to\Models\Operations\CreateAtsScorecardResponse
     */
	public function createAtsScorecard(
        ?\Unified\Unified_to\Models\Operations\CreateAtsScorecardRequest $request,
        \Unified\Unified_to\Models\Operations\CreateAtsScorecardSecurity $security,
    ): \Unified\Unified_to\Models\Operations\CreateAtsScorecardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard', \Unified\Unified_to\Models\Operations\CreateAtsScorecardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsScorecard", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\CreateAtsScorecardResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an activity
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsActivityRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsActivitySecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsActivityResponse
     */
	public function getAtsActivity(
        ?\Unified\Unified_to\Models\Operations\GetAtsActivityRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsActivitySecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsActivityResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/activity/{id}', \Unified\Unified_to\Models\Operations\GetAtsActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsActivityRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsActivityResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an application
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsApplicationRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsApplicationSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsApplicationResponse
     */
	public function getAtsApplication(
        ?\Unified\Unified_to\Models\Operations\GetAtsApplicationRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsApplicationSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsApplicationResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\GetAtsApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsApplicationRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsCandidateRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsCandidateSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsCandidateResponse
     */
	public function getAtsCandidate(
        ?\Unified\Unified_to\Models\Operations\GetAtsCandidateRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsCandidateSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsCandidateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\GetAtsCandidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsCandidateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsCandidateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a company
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsCompanyRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsCompanySecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsCompanyResponse
     */
	public function getAtsCompany(
        ?\Unified\Unified_to\Models\Operations\GetAtsCompanyRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsCompanySecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsCompanyResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/company/{id}', \Unified\Unified_to\Models\Operations\GetAtsCompanyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsCompanyRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsCompanyResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCompany = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCompany', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a document
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsDocumentRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsDocumentSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsDocumentResponse
     */
	public function getAtsDocument(
        ?\Unified\Unified_to\Models\Operations\GetAtsDocumentRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsDocumentSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/document/{id}', \Unified\Unified_to\Models\Operations\GetAtsDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsDocumentRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsDocumentResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsInterviewRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsInterviewSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsInterviewResponse
     */
	public function getAtsInterview(
        ?\Unified\Unified_to\Models\Operations\GetAtsInterviewRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsInterviewSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsInterviewResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\GetAtsInterviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsInterviewRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsInterviewResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a job
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsJobRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsJobSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsJobResponse
     */
	public function getAtsJob(
        ?\Unified\Unified_to\Models\Operations\GetAtsJobRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsJobSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\GetAtsJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsJobRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsJobResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\GetAtsScorecardRequest $request
     * @param \Unified\Unified_to\Models\Operations\GetAtsScorecardSecurity $security
     * @return \Unified\Unified_to\Models\Operations\GetAtsScorecardResponse
     */
	public function getAtsScorecard(
        ?\Unified\Unified_to\Models\Operations\GetAtsScorecardRequest $request,
        \Unified\Unified_to\Models\Operations\GetAtsScorecardSecurity $security,
    ): \Unified\Unified_to\Models\Operations\GetAtsScorecardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\GetAtsScorecardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\GetAtsScorecardRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\GetAtsScorecardResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all activities
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsActivitiesRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsActivitiesSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsActivitiesResponse
     */
	public function listAtsActivities(
        ?\Unified\Unified_to\Models\Operations\ListAtsActivitiesRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsActivitiesSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsActivitiesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/activity', \Unified\Unified_to\Models\Operations\ListAtsActivitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsActivitiesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsActivitiesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsActivities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsActivity>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all applications
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsApplicationsRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsApplicationsSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsApplicationsResponse
     */
	public function listAtsApplications(
        ?\Unified\Unified_to\Models\Operations\ListAtsApplicationsRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsApplicationsSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsApplicationsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application', \Unified\Unified_to\Models\Operations\ListAtsApplicationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsApplicationsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsApplicationsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsApplication>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all application statuses
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesResponse
     */
	public function listAtsApplicationstatuses(
        ?\Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/applicationstatus', \Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsApplicationstatusesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsStatuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsStatus>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all candidates
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsCandidatesRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsCandidatesSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsCandidatesResponse
     */
	public function listAtsCandidates(
        ?\Unified\Unified_to\Models\Operations\ListAtsCandidatesRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsCandidatesSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsCandidatesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate', \Unified\Unified_to\Models\Operations\ListAtsCandidatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsCandidatesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsCandidatesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsCandidate>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all companies
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsCompaniesRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsCompaniesSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsCompaniesResponse
     */
	public function listAtsCompanies(
        ?\Unified\Unified_to\Models\Operations\ListAtsCompaniesRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsCompaniesSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsCompaniesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/company', \Unified\Unified_to\Models\Operations\ListAtsCompaniesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsCompaniesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsCompaniesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCompanies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsCompany>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all documents
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsDocumentsRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsDocumentsSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsDocumentsResponse
     */
	public function listAtsDocuments(
        ?\Unified\Unified_to\Models\Operations\ListAtsDocumentsRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsDocumentsSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsDocumentsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/document', \Unified\Unified_to\Models\Operations\ListAtsDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsDocumentsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsDocumentsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsDocuments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsDocument>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all interviews
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsInterviewsRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsInterviewsSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsInterviewsResponse
     */
	public function listAtsInterviews(
        ?\Unified\Unified_to\Models\Operations\ListAtsInterviewsRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsInterviewsSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsInterviewsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview', \Unified\Unified_to\Models\Operations\ListAtsInterviewsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsInterviewsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsInterviewsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterviews = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsInterview>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all jobs
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsJobsRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsJobsSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsJobsResponse
     */
	public function listAtsJobs(
        ?\Unified\Unified_to\Models\Operations\ListAtsJobsRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsJobsSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsJobsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job', \Unified\Unified_to\Models\Operations\ListAtsJobsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsJobsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsJobsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJobs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsJob>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all scorecards
     * 
     * @param \Unified\Unified_to\Models\Operations\ListAtsScorecardsRequest $request
     * @param \Unified\Unified_to\Models\Operations\ListAtsScorecardsSecurity $security
     * @return \Unified\Unified_to\Models\Operations\ListAtsScorecardsResponse
     */
	public function listAtsScorecards(
        ?\Unified\Unified_to\Models\Operations\ListAtsScorecardsRequest $request,
        \Unified\Unified_to\Models\Operations\ListAtsScorecardsSecurity $security,
    ): \Unified\Unified_to\Models\Operations\ListAtsScorecardsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard', \Unified\Unified_to\Models\Operations\ListAtsScorecardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Unified\Unified_to\Models\Operations\ListAtsScorecardsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\ListAtsScorecardsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<Unified\Unified_to\Models\Shared\AtsScorecard>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an activity
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsActivityRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsActivitySecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsActivityResponse
     */
	public function patchAtsActivity(
        ?\Unified\Unified_to\Models\Operations\PatchAtsActivityRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsActivitySecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsActivityResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/activity/{id}', \Unified\Unified_to\Models\Operations\PatchAtsActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsActivity", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsActivityResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an application
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsApplicationRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsApplicationSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsApplicationResponse
     */
	public function patchAtsApplication(
        ?\Unified\Unified_to\Models\Operations\PatchAtsApplicationRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsApplicationSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsApplicationResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\PatchAtsApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsApplication", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsCandidateRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsCandidateSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsCandidateResponse
     */
	public function patchAtsCandidate(
        ?\Unified\Unified_to\Models\Operations\PatchAtsCandidateRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsCandidateSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsCandidateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\PatchAtsCandidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsCandidate", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsCandidateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a document
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsDocumentRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsDocumentSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsDocumentResponse
     */
	public function patchAtsDocument(
        ?\Unified\Unified_to\Models\Operations\PatchAtsDocumentRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsDocumentSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/document/{id}', \Unified\Unified_to\Models\Operations\PatchAtsDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsDocument", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsDocumentResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsInterviewRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsInterviewSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsInterviewResponse
     */
	public function patchAtsInterview(
        ?\Unified\Unified_to\Models\Operations\PatchAtsInterviewRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsInterviewSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsInterviewResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\PatchAtsInterviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsInterview", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsInterviewResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a job
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsJobRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsJobSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsJobResponse
     */
	public function patchAtsJob(
        ?\Unified\Unified_to\Models\Operations\PatchAtsJobRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsJobSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\PatchAtsJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsJob", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsJobResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\PatchAtsScorecardRequest $request
     * @param \Unified\Unified_to\Models\Operations\PatchAtsScorecardSecurity $security
     * @return \Unified\Unified_to\Models\Operations\PatchAtsScorecardResponse
     */
	public function patchAtsScorecard(
        ?\Unified\Unified_to\Models\Operations\PatchAtsScorecardRequest $request,
        \Unified\Unified_to\Models\Operations\PatchAtsScorecardSecurity $security,
    ): \Unified\Unified_to\Models\Operations\PatchAtsScorecardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\PatchAtsScorecardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsScorecard", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\PatchAtsScorecardResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an activity
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsActivityRequest $request
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsActivitySecurity $security
     * @return \Unified\Unified_to\Models\Operations\RemoveAtsActivityResponse
     */
	public function removeAtsActivity(
        ?\Unified\Unified_to\Models\Operations\RemoveAtsActivityRequest $request,
        \Unified\Unified_to\Models\Operations\RemoveAtsActivitySecurity $security,
    ): \Unified\Unified_to\Models\Operations\RemoveAtsActivityResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/activity/{id}', \Unified\Unified_to\Models\Operations\RemoveAtsActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveAtsActivityResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove an application
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsApplicationRequest $request
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsApplicationSecurity $security
     * @return \Unified\Unified_to\Models\Operations\RemoveAtsApplicationResponse
     */
	public function removeAtsApplication(
        ?\Unified\Unified_to\Models\Operations\RemoveAtsApplicationRequest $request,
        \Unified\Unified_to\Models\Operations\RemoveAtsApplicationSecurity $security,
    ): \Unified\Unified_to\Models\Operations\RemoveAtsApplicationResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\RemoveAtsApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveAtsApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsCandidateRequest $request
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsCandidateSecurity $security
     * @return \Unified\Unified_to\Models\Operations\RemoveAtsCandidateResponse
     */
	public function removeAtsCandidate(
        ?\Unified\Unified_to\Models\Operations\RemoveAtsCandidateRequest $request,
        \Unified\Unified_to\Models\Operations\RemoveAtsCandidateSecurity $security,
    ): \Unified\Unified_to\Models\Operations\RemoveAtsCandidateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\RemoveAtsCandidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveAtsCandidateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a document
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsDocumentRequest $request
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsDocumentSecurity $security
     * @return \Unified\Unified_to\Models\Operations\RemoveAtsDocumentResponse
     */
	public function removeAtsDocument(
        ?\Unified\Unified_to\Models\Operations\RemoveAtsDocumentRequest $request,
        \Unified\Unified_to\Models\Operations\RemoveAtsDocumentSecurity $security,
    ): \Unified\Unified_to\Models\Operations\RemoveAtsDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/document/{id}', \Unified\Unified_to\Models\Operations\RemoveAtsDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveAtsDocumentResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsInterviewRequest $request
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsInterviewSecurity $security
     * @return \Unified\Unified_to\Models\Operations\RemoveAtsInterviewResponse
     */
	public function removeAtsInterview(
        ?\Unified\Unified_to\Models\Operations\RemoveAtsInterviewRequest $request,
        \Unified\Unified_to\Models\Operations\RemoveAtsInterviewSecurity $security,
    ): \Unified\Unified_to\Models\Operations\RemoveAtsInterviewResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\RemoveAtsInterviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveAtsInterviewResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a job
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsJobRequest $request
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsJobSecurity $security
     * @return \Unified\Unified_to\Models\Operations\RemoveAtsJobResponse
     */
	public function removeAtsJob(
        ?\Unified\Unified_to\Models\Operations\RemoveAtsJobRequest $request,
        \Unified\Unified_to\Models\Operations\RemoveAtsJobSecurity $security,
    ): \Unified\Unified_to\Models\Operations\RemoveAtsJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\RemoveAtsJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveAtsJobResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsScorecardRequest $request
     * @param \Unified\Unified_to\Models\Operations\RemoveAtsScorecardSecurity $security
     * @return \Unified\Unified_to\Models\Operations\RemoveAtsScorecardResponse
     */
	public function removeAtsScorecard(
        ?\Unified\Unified_to\Models\Operations\RemoveAtsScorecardRequest $request,
        \Unified\Unified_to\Models\Operations\RemoveAtsScorecardSecurity $security,
    ): \Unified\Unified_to\Models\Operations\RemoveAtsScorecardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\RemoveAtsScorecardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\RemoveAtsScorecardResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an activity
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsActivityRequest $request
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsActivitySecurity $security
     * @return \Unified\Unified_to\Models\Operations\UpdateAtsActivityResponse
     */
	public function updateAtsActivity(
        ?\Unified\Unified_to\Models\Operations\UpdateAtsActivityRequest $request,
        \Unified\Unified_to\Models\Operations\UpdateAtsActivitySecurity $security,
    ): \Unified\Unified_to\Models\Operations\UpdateAtsActivityResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/activity/{id}', \Unified\Unified_to\Models\Operations\UpdateAtsActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsActivity", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateAtsActivityResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an application
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsApplicationRequest $request
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsApplicationSecurity $security
     * @return \Unified\Unified_to\Models\Operations\UpdateAtsApplicationResponse
     */
	public function updateAtsApplication(
        ?\Unified\Unified_to\Models\Operations\UpdateAtsApplicationRequest $request,
        \Unified\Unified_to\Models\Operations\UpdateAtsApplicationSecurity $security,
    ): \Unified\Unified_to\Models\Operations\UpdateAtsApplicationResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/application/{id}', \Unified\Unified_to\Models\Operations\UpdateAtsApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsApplication", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateAtsApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a candidate
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsCandidateRequest $request
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsCandidateSecurity $security
     * @return \Unified\Unified_to\Models\Operations\UpdateAtsCandidateResponse
     */
	public function updateAtsCandidate(
        ?\Unified\Unified_to\Models\Operations\UpdateAtsCandidateRequest $request,
        \Unified\Unified_to\Models\Operations\UpdateAtsCandidateSecurity $security,
    ): \Unified\Unified_to\Models\Operations\UpdateAtsCandidateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/candidate/{id}', \Unified\Unified_to\Models\Operations\UpdateAtsCandidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsCandidate", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateAtsCandidateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsCandidate = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsCandidate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a document
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsDocumentRequest $request
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsDocumentSecurity $security
     * @return \Unified\Unified_to\Models\Operations\UpdateAtsDocumentResponse
     */
	public function updateAtsDocument(
        ?\Unified\Unified_to\Models\Operations\UpdateAtsDocumentRequest $request,
        \Unified\Unified_to\Models\Operations\UpdateAtsDocumentSecurity $security,
    ): \Unified\Unified_to\Models\Operations\UpdateAtsDocumentResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/document/{id}', \Unified\Unified_to\Models\Operations\UpdateAtsDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsDocument", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateAtsDocumentResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a interview
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsInterviewRequest $request
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsInterviewSecurity $security
     * @return \Unified\Unified_to\Models\Operations\UpdateAtsInterviewResponse
     */
	public function updateAtsInterview(
        ?\Unified\Unified_to\Models\Operations\UpdateAtsInterviewRequest $request,
        \Unified\Unified_to\Models\Operations\UpdateAtsInterviewSecurity $security,
    ): \Unified\Unified_to\Models\Operations\UpdateAtsInterviewResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/interview/{id}', \Unified\Unified_to\Models\Operations\UpdateAtsInterviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsInterview", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateAtsInterviewResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsInterview = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsInterview', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a job
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsJobRequest $request
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsJobSecurity $security
     * @return \Unified\Unified_to\Models\Operations\UpdateAtsJobResponse
     */
	public function updateAtsJob(
        ?\Unified\Unified_to\Models\Operations\UpdateAtsJobRequest $request,
        \Unified\Unified_to\Models\Operations\UpdateAtsJobSecurity $security,
    ): \Unified\Unified_to\Models\Operations\UpdateAtsJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/job/{id}', \Unified\Unified_to\Models\Operations\UpdateAtsJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsJob", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateAtsJobResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a scorecard
     * 
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsScorecardRequest $request
     * @param \Unified\Unified_to\Models\Operations\UpdateAtsScorecardSecurity $security
     * @return \Unified\Unified_to\Models\Operations\UpdateAtsScorecardResponse
     */
	public function updateAtsScorecard(
        ?\Unified\Unified_to\Models\Operations\UpdateAtsScorecardRequest $request,
        \Unified\Unified_to\Models\Operations\UpdateAtsScorecardSecurity $security,
    ): \Unified\Unified_to\Models\Operations\UpdateAtsScorecardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/ats/{connection_id}/scorecard/{id}', \Unified\Unified_to\Models\Operations\UpdateAtsScorecardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "atsScorecard", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Unified\Unified_to\Models\Operations\UpdateAtsScorecardResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->atsScorecard = $serializer->deserialize((string)$httpResponse->getBody(), 'Unified\Unified_to\Models\Shared\AtsScorecard', 'json');
            }
        }

        return $response;
    }
}